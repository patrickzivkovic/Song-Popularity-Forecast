Deskriptive Analyse des Musikdatensets
========================================================
author: Michael Angerer & Patrick Zivkovic
date: 21.04.2020
autosize: true

Ein Einblick in das Ursprungs-Datenset
========================================================

```{r, echo = F}
pacman::p_load(data.table, dplyr, stringi, stringr, spotifyr, lubridate, knitr, 
               cld3, quanteda, tm, rlang, stringdist, rvest, purrr, tidyverse,
               janitor, qdap, wordcloud, gridExtra, hunspell, kableExtra)
rm(list = ls())

data = fread("lyrics_final_dataset.csv") #Lade dein Datenset
genres = fread("artists_with_overgenre.csv")
subgenres = fread("subgenre_in _set_list.csv")
lyrics <- fread("original_dataset.csv")
labels = paste0(seq(1931, 2011, 10), "-", seq(1940, 2020, 10))
data$decades = cut(data$year, breaks = seq(1930,2020, by = 10), labels = labels, include.lowest = F, right = T)


knitr::kable(head((lyrics %>% mutate(text = rep("Beispieltext", dim(lyrics)[1])))))

```

Was haben wir bereits gemacht
========================================================

- cleanen der Songnamen
    - `stringdist`-package: OSA (Optimal String Alignment/restricted Damerau-Levenshtein distance) Algorithmus
    - heisst: eine Loeschung, Einfuegung oder Austausch von Charakter wird in Kauf genommen (entspricht dist=1)
    - wir haben maxDist = 2 (2 Loeschungen, Einfuegungen oder Austaeusche) gewaehlt - zeigt gute Performance
- Daten anreichern mit Spotify-Daten (ueber Spotify-Api)
    - Popularitaetsscore (Song und Kuenstler)
    - Lieddauer
    - Erscheinungsjahr des Songs
    - Kuenstler Genre (genauer hat es Spotify nicht)
    
Details zum Datenset
========================================================

- 36718 Songs
- 590 verschiedene Künstler (rund 62 Songs pro Künstler)

```{r, echo = FALSE}
kable(data %>% group_by(artist) %>% summarise(songs = n()) %>% top_n(10, songs) %>% arrange(desc(songs)))
```

Anzahl der Künstler
========================================================

```{r, echo = FALSE}
kable(data %>% group_by(artist) %>% summarise(songs = n()) %>% top_n(10, songs) %>% arrange(desc(songs)))
```

Ein Einblick in unser Datenset
========================================================

```{r, echo = F}


knitr::kable(head(data %>%  mutate(text = rep("Beispieltext", dim(data)[1]))))%>%
  kable_styling(latex_options = "scale_down")
```

Die Populaersten Songs 
========================================================

```{r, echo = F}
knitr::kable(data %>% top_n(10, popularity) %>% select(artist, song, popularity, year) %>% arrange(desc(popularity)))
```

Die Populaersten Kuenstler 
========================================================
```{r, echo = F}
knitr::kable(data %>% distinct_at(c("artist", "artist_popularity")) %>% top_n(10, artist_popularity)  %>% arrange(desc(artist_popularity)))
```


Die Populaersten 2 Songs pro Dekade
========================================================

```{r, echo = F}
knitr::kable(data %>% group_by(decades) %>% top_n(2, popularity) %>% select(artist, song, decades, popularity) %>% arrange(desc(decades), desc(popularity)))%>%
  kable_styling(latex_options = "scale_down")
```


Welche Künstler umfasst das Datenset?
========================================================

```{r, echo=F, out.width = "70%", fig.align = "center"}
#Wordcloud über Titelanzahl, die wir von den Artists haben
artist_table = data %>% group_by(artist) %>% summarise(n = n()) %>% arrange(desc(n))
wordcloud::wordcloud(words = artist_table$artist, freq = artist_table$n, scale = c(.1,2), max.words = 100, colors = c("purple", "red", "blue"))
```


Die verschiedenen Subgenres aus Spotify
========================================================

```{r, echo=F, fig.align = "center"}
subgenre_table = subgenres %>% group_by(genres) %>% summarise(n = n()) %>% arrange(desc(n))
#Wordcloud davon
wordcloud::wordcloud(words = subgenre_table$genres, freq = subgenre_table$n, colors = c("black", "green", "blue", "red"))

```

Wie sind wir damit umgegangen?
========================================================

- Hinzufuegen eines Uebergenres für die Künstler durch Webscraping
    - mithilfe des `rvest`-Packages von `Wikipedia` und `musicgenreslist.com`
    - matchen der Genres mithilfe dieser Daten


```{r, echo=FALSE}
genre_table = genres %>% group_by(overgenres) %>% summarise(n = n()) %>% arrange(n)
wordcloud::wordcloud(words = genre_table$overgenres, freq = genre_table$n, colors = c("black", "green", "blue", "red"))
```




Wie viele Songs haben wir in jeder Dekade?
========================================================

```{r, echo = F}
ggplot(data, aes(x = decades, fill = decades)) + 
  geom_bar(stat = "count") +
  ggtitle("Anzahl der Songs im Datenset aufgeteilt nach Dekaden") +
  theme_bw() +
  theme(axis.ticks = element_blank(), axis.text.x = element_blank()) 
```



Durchschnittliche Songpopularitaet einer Dekade 
========================================================

```{r, echo = F}
ggplot(data %>% group_by(decades) %>% summarise(mean_pop = mean(popularity, na.rm = T)), aes(x = decades, y = mean_pop, fill = decades)) +
  geom_bar(stat = "identity") +
  ggtitle("Popularität der Songs aufgeteilt nach Jahre/Dekaden") +
  theme_classic() + 
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
  xlab("Dekaden") +
  ylab("Mittlere Popularität der Songs") +
  geom_text( aes( label = round(mean_pop, digits = 2), y = mean_pop),
             vjust = 1.4, size = 5, color = "black" )
```


Wann waren die Genres am Populaersten?
========================================================

```{r, echo = F}
ggplot(data %>% left_join(genres, by = "artist"), aes(x = year, y = popularity, color = decades)) + geom_point() + facet_wrap(overgenres~.) +
  ggtitle("Popularitaet der Songs aufgeteilt nach Jahre/Dekaden") + theme_classic() + xlab("Jahre") + ylab("Popularitaet") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none", plot.title = element_text(hjust = 0.5))
```

Anzahl der Kuenstler in  einem Genre + mittlere Genrepopularitaet
========================================================
```{r, echo = F}
genre_popularity = left_join(genres, data %>% select(artist, artist_popularity) %>% distinct(artist, .keep_all = T), by = "artist")
genre_pop_mean = genre_popularity %>% group_by(overgenres) %>% summarise(artists_in_genre = n(), mean_genre_pop = mean(artist_popularity, na.rm = T)) %>% arrange(desc(mean_genre_pop))

q = ggplot(genre_pop_mean, aes(x = reorder(overgenres, -artists_in_genre), y = artists_in_genre, fill = overgenres)) + geom_bar(stat = "identity") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") + ylab("Anzahl an Künstlern") + xlab("Genre") +
  ggtitle("Anzahl an Künstlern im Genre (absteigend nach Anzahl)")

w = ggplot(genre_pop_mean, aes(x = reorder(overgenres, -mean_genre_pop), y = mean_genre_pop, fill = overgenres)) + geom_bar(stat = "identity")+ 
  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") + ylab("Mittlere Genre-Popularität") + xlab("Genre") +
  ggtitle("Mittlere Genrepopularität (absteigend nach Popularität)")

grid.arrange(q,w)
```

